openapi: 3.0.3
info:
  title: The Tarpaulin API
  description: API for an "alternative" to Canvas.
  version: 1.0.0
servers:
- url: /
tags:
- name: Users
  description: |
    API endpoints related to application Users.
- name: Courses
  description: |
    API endpoints related to Courses.
- name: Assignments
  description: |
    API endpoints related to Assignments.
paths:
  /users:
    post:
      tags:
      - Users
      summary: Create a new User.
      description: |
        Create and store a new application User with specified data and adds it to the application's database.  Only an authenticated User with 'admin' role can create users with the 'admin' or 'instructor' roles.
      operationId: createUser
      requestBody:
        description: A User object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: New User successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "400":
          description: |
            The request body was either not present or did not contain a valid User object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Users
  /users/login:
    post:
      tags:
      - Users
      summary: Log in a User.
      description: |
        Authenticate a specific User with their email address and password.
      operationId: authenticateUser
      requestBody:
        description: |
          Email address and plain-text password for the User being authenticated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: jdoe@oregonstate.edu
              password: hunter2
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: |
            The request body was either not present or did not contain all of the required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: |
            The specified credentials were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: |
            An internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Users
  /users/{id}:
    get:
      tags:
      - Users
      summary: Fetch data about a specific User.
      description: |
        Returns information about the specified User.  If the User has the 'instructor' role, the response should include a list of the IDs of the Courses the User teaches (i.e. Courses whose `instructorId` field matches the ID of this User).  If the User has the 'student' role, the response should include a list of the IDs of the Courses the User is enrolled in.  Only an authenticated User whose ID matches the ID of the requested User can fetch this information.
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of a User.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id'
        example: "123"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Course `id` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Users
  /courses:
    get:
      tags:
      - Courses
      summary: Fetch the list of all Courses.
      description: |
        Returns the list of all Courses.  This list should be paginated.  The Courses returned should not contain the list of students in the Course or the list of Assignments for the Course.
      operationId: getAllCourses
      parameters:
      - name: page
        in: query
        description: |
          Page of Courses to fetch.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 3
          default: 1
      - name: subject
        in: query
        description: |
          Fetch only Courses with the specified subject code.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: CS
      - name: number
        in: query
        description: |
          Fetch only Courses with the specified course number.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "493"
      - name: term
        in: query
        description: |
          Fetch only Courses in the specified academic term.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: sp22
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
      x-swagger-router-controller: Courses
    post:
      tags:
      - Courses
      summary: Create a new course.
      description: |
        Creates a new Course with specified data and adds it to the application's database.  Only an authenticated User with 'admin' role can create a new Course.
      operationId: createCourse
      requestBody:
        description: A Course object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        "201":
          description: New Course successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
        "400":
          description: |
            The request body was either not present or did not contain a valid Course object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Courses
  /courses/{id}:
    get:
      tags:
      - Courses
      summary: Fetch data about a specific Course.
      description: |
        Returns summary data about the Course, excluding the list of students enrolled in the course and the list of Assignments for the course.
      operationId: getCourseById
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of a Course.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
        example: "123"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        "404":
          description: Specified Course `id` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Courses
    delete:
      tags:
      - Courses
      summary: Remove a specific Course from the database.
      description: |
        Completely removes the data for the specified Course, including all enrolled students, all Assignments, etc.  Only an authenticated User with 'admin' role can remove a Course.
      operationId: removeCourseById
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of a Course.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
        example: "123"
      responses:
        "204":
          description: Success
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Course `id` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Courses
    patch:
      tags:
      - Courses
      summary: Update data for a specific Course.
      description: |
        Performs a partial update on the data for the Course.  Note that enrolled students and assignments cannot be modified via this endpoint.  Only an authenticated User with 'admin' role or an authenticated 'instructor' User whose ID matches the `instructorId` of the Course can update Course information.
      operationId: updateCourseById
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of a Course.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_1'
        example: "123"
      requestBody:
        description: |
          Partial updates to be applied to the specified Course.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        "200":
          description: Success
        "400":
          description: |
            The request body was either not present or did not contain any fields related to Course objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Course `id` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Courses
  /courses/{id}/students:
    get:
      tags:
      - Courses
      summary: Fetch a list of the students enrolled in the Course.
      description: |
        Returns a list containing the User IDs of all students currently enrolled in the Course.  Only an authenticated User with 'admin' role or an authenticated 'instructor' User whose ID matches the `instructorId` of the Course can fetch the list of enrolled students.
      operationId: getStudentsByCourseId
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of a Course.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_2'
        example: "123"
      responses:
        "200":
          description: |
            Array of User IDs for students enrolled in the Course.  Exact type/format of IDs will depend on your implementation but each will likely be either an integer or a string.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Course `id` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Courses
    post:
      tags:
      - Courses
      summary: Update enrollment for a Course.
      description: |
        Enrolls and/or unenrolls students from a Course.  Only an authenticated User with 'admin' role or an authenticated 'instructor' User whose ID matches the `instructorId` of the Course can update the students enrolled in the Course.
      operationId: updateEnrollmentByCourseId
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of a Course.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_2'
        example: "123"
      requestBody:
        description: |
          Arrays of User IDs for students to be enrolled/unenrolled in the Course.  Exact type/format of IDs will depend on your implementation but each will likely be either an integer or a string.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id_students_body'
        required: true
      responses:
        "200":
          description: Success
        "400":
          description: |
            The request body was either not present or did not contain the fields described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Course `id` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Courses
  /courses/{id}/roster:
    get:
      tags:
      - Courses
      summary: Fetch a CSV file containing list of the students enrolled in the Course.
      description: |
        Returns a CSV file containing information about all of the students currently enrolled in the Course, including names, IDs, and email addresses.  Only an authenticated User with 'admin' role or an authenticated 'instructor' User whose ID matches the `instructorId` of the Course can fetch the course roster.
      operationId: getRosterByCourseId
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of a Course.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_3'
        example: "123"
      responses:
        "200":
          description: |
            A CSV file containing information about all of the students currently enrolled in the Course, including names, IDs, and email addresses.
          content:
            text/csv:
              schema:
                type: string
                example: |
                  123,"Jane Doe",doej@oregonstate.edu
                  ...
                x-content-type: text/csv
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Course `id` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Courses
  /courses/{id}/assignments:
    get:
      tags:
      - Courses
      summary: Fetch a list of the Assignments for the Course.
      description: |
        Returns a list containing the Assignment IDs of all Assignments for the Course.
      operationId: getAssignmentsByCourseId
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of a Course.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_4'
        example: "123"
      responses:
        "200":
          description: |
            Array of Assignment IDs for all of the Course's Assignments.  Exact type/format of IDs will depend on your implementation but each will likely be either an integer or a string.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "404":
          description: Specified Course `id` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Courses
  /assignments:
    post:
      tags:
      - Assignments
      summary: Create a new Assignment.
      description: |
        Create and store a new Assignment with specified data and adds it to the application's database.  Only an authenticated User with 'admin' role or an authenticated 'instructor' User whose ID matches the `instructorId` of the Course corresponding to the Assignment's `courseId` can create an Assignment.
      operationId: createAssignment
      requestBody:
        description: An Assignment object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
        required: true
      responses:
        "201":
          description: New Assignment successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_2'
        "400":
          description: |
            The request body was either not present or did not contain a valid Assignment object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Assignments
  /assignments/{id}:
    get:
      tags:
      - Assignments
      summary: Fetch data about a specific Assignment.
      description: |
        Returns summary data about the Assignment, excluding the list of Submissions.
      operationId: getAssignmentById
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of an Assignment.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_5'
        example: "123"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        "404":
          description: Specified Assignment `id` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Assignments
    delete:
      tags:
      - Assignments
      summary: Remove a specific Assignment from the database.
      description: |
        Completely removes the data for the specified Assignment, including all submissions.  Only an authenticated User with 'admin' role or an authenticated 'instructor' User whose ID matches the `instructorId` of the Course corresponding to the Assignment's `courseId` can delete an Assignment.
      operationId: removeAssignmentsById
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of an Assignment.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_5'
        example: "123"
      responses:
        "204":
          description: Success
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Assignment `id` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Assignments
    patch:
      tags:
      - Assignments
      summary: Update data for a specific Assignment.
      description: |
        Performs a partial update on the data for the Assignment.  Note that submissions cannot be modified via this endpoint.  Only an authenticated User with 'admin' role or an authenticated 'instructor' User whose ID matches the `instructorId` of the Course corresponding to the Assignment's `courseId` can update an Assignment.
      operationId: updateAssignmentById
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of an Assignment.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_5'
        example: "123"
      requestBody:
        description: |
          Partial updates to be applied to the specified Assignment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
        required: true
      responses:
        "200":
          description: Success
        "400":
          description: |
            The request body was either not present or did not contain any fields related to Assignment objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Assignment `id` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Assignments
  /assignments/{id}/submissions:
    get:
      tags:
      - Assignments
      summary: Fetch the list of all Submissions for an Assignment.
      description: |
        Returns the list of all Submissions for an Assignment.  This list should be paginated.  Only an authenticated User with 'admin' role or an authenticated 'instructor' User whose ID matches the `instructorId` of the Course corresponding to the Assignment's `courseId` can fetch the Submissions for an Assignment.
      operationId: getSubmissionsByAssignmentId
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of an Assignment.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_6'
      - name: page
        in: query
        description: |
          Page of Submissions to fetch.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 3
          default: 1
      - name: studentId
        in: query
        description: |
          Fetch assignments only for the specified student ID.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/studentId'
        example: "123"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Assignment `id` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Assignments
    post:
      tags:
      - Assignments
      summary: Create a new Submission for an Assignment.
      description: |
        Create and store a new Assignment with specified data and adds it to the application's database.  Only an authenticated User with 'student' role who is enrolled in the Course corresponding to the Assignment's `courseId` can create a Submission.
      operationId: createSubmission
      parameters:
      - name: id
        in: path
        description: |
          Unique ID of an Assignment.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/id_6'
      requestBody:
        description: A Submission object.
        content:
          multipart/formdata:
            schema:
              $ref: '#/components/schemas/Submission'
        required: true
      responses:
        "201":
          description: New Submission successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_3'
        "400":
          description: |
            The request body was either not present or did not contain a valid Submission object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            The request was not made by an authenticated User satisfying the authorization criteria described above.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specified Assignment `id` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Assignments
components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          description: Full name of the User.
          example: Jane Doe
        email:
          type: string
          description: |
            Email address for the User.  This is required to be unique among all Users.
          example: doej@oregonstate.edu
        password:
          type: string
          description: |
            The User's plain-text password.  This is required when creating a new User and when logging in.
          example: hunter2
        role:
          type: string
          description: |
            Permission role of the User.  Can be either 'admin', 'instructor', or 'student'.
          default: student
          enum:
          - admin
          - instructor
          - student
        courses:
          type: array
          description: |
            The courses a user is enrolled in/teaches
          items:
            type: string
      description: |
        An object representing information about a Tarpaulin application user.
      example:
        courses:
        - courses
        - courses
        password: hunter2
        role: student
        name: Jane Doe
        email: doej@oregonstate.edu
    Course:
      type: object
      properties:
        subject:
          type: string
          description: Short subject code.
          example: CS
        number:
          type: string
          description: Course number.
          example: "493"
        title:
          type: string
          description: Course title.
          example: Cloud Application Development
        term:
          type: string
          description: Academic term in which Course is offered.
          example: sp22
        instructorId:
          description: |
            ID for Course instructor.  Exact type/format will depend on your implementation but will likely be either an integer or a string.  This ID must correspond to a User with the 'instructor' role.
          example: "123"
          oneOf:
          - type: integer
          - type: string
        students:
          type: array
          description: |
            The ids of students in a course
          items:
            type: string
      description: |
        An object representing information about a specific course.
      example:
        number: "493"
        subject: CS
        students:
        - students
        - students
        term: sp22
        title: Cloud Application Development
        instructorId: "123"
    Assignment:
      type: object
      properties:
        courseId:
          description: |
            ID of the Course associated with the Assignment.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
          example: "123"
          oneOf:
          - type: integer
          - type: string
        title:
          type: string
          description: Assignment description.
          example: Assignment 3
        points:
          type: integer
          description: Possible points for the Assignment.
          example: 100
        due:
          type: string
          description: |
            Date and time Assignment is due.  Should be in ISO 8601 format.
          format: date-time
          example: 2022-06-14T17:00:00-07:00
      description: |
        An object representing information about a single assignment.
      example:
        due: 2022-06-14T17:00:00-07:00
        title: Assignment 3
        courseId: "123"
        points: 100
    Submission:
      type: object
      properties:
        assignmentId:
          description: |
            ID of the Assignment to which the Submission corresponds.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
          example: "123"
          oneOf:
          - type: integer
          - type: string
        studentId:
          description: |
            ID of the Student who created the submission.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
          example: "123"
          oneOf:
          - type: integer
          - type: string
        timestamp:
          type: string
          description: |
            Date and time Submission was made.  Should be in ISO 8601 format.
          format: date-time
          example: 2022-06-14T17:00:00-07:00
        grade:
          type: number
          description: |
            The grade, in points, assigned to the student for this sumbission, if one is assigned.  Should not be accepted during submission creation, only via update.
          format: float
          example: 94.5
        file:
          type: string
          description: |
            When the Submission is being created, this will be the binary data contained in the submitted file.  When Submission information is being returned from the API, this will contain the URL from which the file can be downloaded.
      description: |
        An object representing information about a single student submission for an Assignment.
      example:
        studentId: "123"
        file: file
        grade: 94.5
        assignmentId: "123"
        timestamp: 2022-06-14T17:00:00-07:00
    Error:
      type: object
      properties:
        error:
          type: string
          description: A message describing the Error.
      description: |
        An object representing an error response from the API.
    inline_response_201:
      type: object
      properties:
        id:
          description: |
            Unique ID of the created User.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
          example: "123"
          oneOf:
          - type: integer
          - type: string
      example:
        id: "123"
    inline_response_200:
      type: object
      properties:
        token:
          type: string
          description: |
            A JWT authentication token.
          example: aaaaaaaa.bbbbbbbb.cccccccc
      example:
        token: aaaaaaaa.bbbbbbbb.cccccccc
    id:
      oneOf:
      - type: integer
      - type: string
    inline_response_200_1:
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'
      example:
        courses:
        - number: "493"
          subject: CS
          students:
          - students
          - students
          term: sp22
          title: Cloud Application Development
          instructorId: "123"
        - number: "493"
          subject: CS
          students:
          - students
          - students
          term: sp22
          title: Cloud Application Development
          instructorId: "123"
    inline_response_201_1:
      type: object
      properties:
        id:
          description: |
            Unique ID of the created Course.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
          example: "123"
          oneOf:
          - type: integer
          - type: string
      example:
        id: "123"
    id_1:
      oneOf:
      - type: integer
      - type: string
    id_2:
      oneOf:
      - type: integer
      - type: string
    inline_response_200_2:
      type: object
      properties:
        students:
          type: array
          items:
            $ref: '#/components/schemas/User'
      example:
        students:
        - courses:
          - courses
          - courses
          password: hunter2
          role: student
          name: Jane Doe
          email: doej@oregonstate.edu
        - courses:
          - courses
          - courses
          password: hunter2
          role: student
          name: Jane Doe
          email: doej@oregonstate.edu
    id_students_body:
      type: object
      properties:
        add:
          type: array
          description: Students to be enrolled in the Course.
          example:
          - "123"
          - "456"
          items:
            oneOf:
            - type: integer
            - type: string
        remove:
          type: array
          description: Students to be unenrolled from the Course.
          example:
          - "123"
          - "456"
          items:
            oneOf:
            - type: integer
            - type: string
    id_3:
      oneOf:
      - type: integer
      - type: string
    id_4:
      oneOf:
      - type: integer
      - type: string
    inline_response_200_3:
      type: object
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
      example:
        assignments:
        - due: 2022-06-14T17:00:00-07:00
          title: Assignment 3
          courseId: "123"
          points: 100
        - due: 2022-06-14T17:00:00-07:00
          title: Assignment 3
          courseId: "123"
          points: 100
    inline_response_201_2:
      type: object
      properties:
        id:
          description: |
            Unique ID of the created Assignment.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
          example: "123"
          oneOf:
          - type: integer
          - type: string
      example:
        id: "123"
    id_5:
      oneOf:
      - type: integer
      - type: string
    id_6:
      example: "123"
      oneOf:
      - type: integer
      - type: string
    studentId:
      oneOf:
      - type: integer
      - type: string
    inline_response_200_4:
      type: object
      properties:
        submissions:
          type: array
          items:
            $ref: '#/components/schemas/Submission'
      example:
        submissions:
        - studentId: "123"
          file: file
          grade: 94.5
          assignmentId: "123"
          timestamp: 2022-06-14T17:00:00-07:00
        - studentId: "123"
          file: file
          grade: 94.5
          assignmentId: "123"
          timestamp: 2022-06-14T17:00:00-07:00
    inline_response_201_3:
      type: object
      properties:
        id:
          description: |
            Unique ID of the created Submission.  Exact type/format will depend on your implementation but will likely be either an integer or a string.
          example: "123"
          oneOf:
          - type: integer
          - type: string
      example:
        id: "123"
